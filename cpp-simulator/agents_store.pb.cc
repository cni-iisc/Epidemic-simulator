// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: agents_store.proto

#include "agents_store.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_agents_5fstore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AgentElement_agents_5fstore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agents_5fstore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestStatus_agents_5fstore_2eproto;
namespace cohorts {
class TestStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestStatus> _instance;
} _TestStatus_default_instance_;
class AgentElementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AgentElement> _instance;
} _AgentElement_default_instance_;
class AgentStoreDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AgentStore> _instance;
} _AgentStore_default_instance_;
}  // namespace cohorts
static void InitDefaultsscc_info_AgentElement_agents_5fstore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cohorts::_AgentElement_default_instance_;
    new (ptr) ::cohorts::AgentElement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cohorts::AgentElement::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AgentElement_agents_5fstore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AgentElement_agents_5fstore_2eproto}, {
      &scc_info_TestStatus_agents_5fstore_2eproto.base,}};

static void InitDefaultsscc_info_AgentStore_agents_5fstore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cohorts::_AgentStore_default_instance_;
    new (ptr) ::cohorts::AgentStore();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cohorts::AgentStore::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AgentStore_agents_5fstore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AgentStore_agents_5fstore_2eproto}, {
      &scc_info_AgentElement_agents_5fstore_2eproto.base,}};

static void InitDefaultsscc_info_TestStatus_agents_5fstore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cohorts::_TestStatus_default_instance_;
    new (ptr) ::cohorts::TestStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cohorts::TestStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestStatus_agents_5fstore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestStatus_agents_5fstore_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_agents_5fstore_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_agents_5fstore_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_agents_5fstore_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_agents_5fstore_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::cohorts::TestStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::cohorts::TestStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cohorts::TestStatus, tested_epoch_),
  PROTOBUF_FIELD_OFFSET(::cohorts::TestStatus, tested_positive_),
  PROTOBUF_FIELD_OFFSET(::cohorts::TestStatus, contact_traced_epoch_),
  PROTOBUF_FIELD_OFFSET(::cohorts::TestStatus, test_requested_),
  PROTOBUF_FIELD_OFFSET(::cohorts::TestStatus, state_),
  PROTOBUF_FIELD_OFFSET(::cohorts::TestStatus, triggered_contact_trace_),
  PROTOBUF_FIELD_OFFSET(::cohorts::TestStatus, node_test_trigger_),
  0,
  2,
  1,
  3,
  5,
  4,
  6,
  PROTOBUF_FIELD_OFFSET(::cohorts::AgentElement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::cohorts::AgentElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cohorts::AgentElement, infection_status_),
  PROTOBUF_FIELD_OFFSET(::cohorts::AgentElement, entered_symptomatic_state_),
  PROTOBUF_FIELD_OFFSET(::cohorts::AgentElement, entered_hospitalised_state_),
  PROTOBUF_FIELD_OFFSET(::cohorts::AgentElement, state_before_recovery_),
  PROTOBUF_FIELD_OFFSET(::cohorts::AgentElement, infective_),
  PROTOBUF_FIELD_OFFSET(::cohorts::AgentElement, disease_label_),
  PROTOBUF_FIELD_OFFSET(::cohorts::AgentElement, test_status_),
  PROTOBUF_FIELD_OFFSET(::cohorts::AgentElement, time_of_infection_),
  PROTOBUF_FIELD_OFFSET(::cohorts::AgentElement, time_became_infective_),
  1,
  2,
  3,
  5,
  4,
  6,
  0,
  7,
  8,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cohorts::AgentStore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cohorts::AgentStore, agents_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::cohorts::TestStatus)},
  { 19, 33, sizeof(::cohorts::AgentElement)},
  { 42, -1, sizeof(::cohorts::AgentStore)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cohorts::_TestStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cohorts::_AgentElement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cohorts::_AgentStore_default_instance_),
};

const char descriptor_table_protodef_agents_5fstore_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022agents_store.proto\022\007cohorts\"\274\001\n\nTestSt"
  "atus\022\024\n\014tested_epoch\030\001 \002(\005\022\027\n\017tested_pos"
  "itive\030\002 \002(\010\022\034\n\024contact_traced_epoch\030\003 \002("
  "\005\022\026\n\016test_requested\030\004 \002(\010\022\r\n\005state\030\005 \002(\005"
  "\022\037\n\027triggered_contact_trace\030\006 \002(\010\022\031\n\021nod"
  "e_test_trigger\030\007 \002(\005\"\234\002\n\014AgentElement\022\030\n"
  "\020infection_status\030\001 \002(\005\022!\n\031entered_sympt"
  "omatic_state\030\002 \002(\010\022\"\n\032entered_hospitalis"
  "ed_state\030\003 \002(\010\022\035\n\025state_before_recovery\030"
  "\004 \002(\005\022\021\n\tinfective\030\005 \002(\010\022\025\n\rdisease_labe"
  "l\030\006 \002(\005\022(\n\013test_status\030\007 \002(\0132\023.cohorts.T"
  "estStatus\022\031\n\021time_of_infection\030\010 \002(\005\022\035\n\025"
  "time_became_infective\030\t \002(\005\"3\n\nAgentStor"
  "e\022%\n\006agents\030\001 \003(\0132\025.cohorts.AgentElement"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_agents_5fstore_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_agents_5fstore_2eproto_sccs[3] = {
  &scc_info_AgentElement_agents_5fstore_2eproto.base,
  &scc_info_AgentStore_agents_5fstore_2eproto.base,
  &scc_info_TestStatus_agents_5fstore_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_agents_5fstore_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_agents_5fstore_2eproto = {
  false, false, descriptor_table_protodef_agents_5fstore_2eproto, "agents_store.proto", 560,
  &descriptor_table_agents_5fstore_2eproto_once, descriptor_table_agents_5fstore_2eproto_sccs, descriptor_table_agents_5fstore_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_agents_5fstore_2eproto::offsets,
  file_level_metadata_agents_5fstore_2eproto, 3, file_level_enum_descriptors_agents_5fstore_2eproto, file_level_service_descriptors_agents_5fstore_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_agents_5fstore_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_agents_5fstore_2eproto)), true);
namespace cohorts {

// ===================================================================

void TestStatus::InitAsDefaultInstance() {
}
class TestStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<TestStatus>()._has_bits_);
  static void set_has_tested_epoch(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tested_positive(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_contact_traced_epoch(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_test_requested(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_triggered_contact_trace(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_node_test_trigger(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

TestStatus::TestStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cohorts.TestStatus)
}
TestStatus::TestStatus(const TestStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tested_epoch_, &from.tested_epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_test_trigger_) -
    reinterpret_cast<char*>(&tested_epoch_)) + sizeof(node_test_trigger_));
  // @@protoc_insertion_point(copy_constructor:cohorts.TestStatus)
}

void TestStatus::SharedCtor() {
  ::memset(&tested_epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_test_trigger_) -
      reinterpret_cast<char*>(&tested_epoch_)) + sizeof(node_test_trigger_));
}

TestStatus::~TestStatus() {
  // @@protoc_insertion_point(destructor:cohorts.TestStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TestStatus::ArenaDtor(void* object) {
  TestStatus* _this = reinterpret_cast< TestStatus* >(object);
  (void)_this;
}
void TestStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestStatus& TestStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestStatus_agents_5fstore_2eproto.base);
  return *internal_default_instance();
}


void TestStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:cohorts.TestStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&tested_epoch_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&node_test_trigger_) -
        reinterpret_cast<char*>(&tested_epoch_)) + sizeof(node_test_trigger_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 tested_epoch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tested_epoch(&has_bits);
          tested_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool tested_positive = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tested_positive(&has_bits);
          tested_positive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 contact_traced_epoch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_contact_traced_epoch(&has_bits);
          contact_traced_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool test_requested = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_test_requested(&has_bits);
          test_requested_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_state(&has_bits);
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool triggered_contact_trace = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_triggered_contact_trace(&has_bits);
          triggered_contact_trace_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 node_test_trigger = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_node_test_trigger(&has_bits);
          node_test_trigger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cohorts.TestStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 tested_epoch = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tested_epoch(), target);
  }

  // required bool tested_positive = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_tested_positive(), target);
  }

  // required int32 contact_traced_epoch = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_contact_traced_epoch(), target);
  }

  // required bool test_requested = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_test_requested(), target);
  }

  // required int32 state = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_state(), target);
  }

  // required bool triggered_contact_trace = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_triggered_contact_trace(), target);
  }

  // required int32 node_test_trigger = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_node_test_trigger(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cohorts.TestStatus)
  return target;
}

size_t TestStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cohorts.TestStatus)
  size_t total_size = 0;

  if (_internal_has_tested_epoch()) {
    // required int32 tested_epoch = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tested_epoch());
  }

  if (_internal_has_contact_traced_epoch()) {
    // required int32 contact_traced_epoch = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_contact_traced_epoch());
  }

  if (_internal_has_tested_positive()) {
    // required bool tested_positive = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_test_requested()) {
    // required bool test_requested = 4;
    total_size += 1 + 1;
  }

  if (_internal_has_triggered_contact_trace()) {
    // required bool triggered_contact_trace = 6;
    total_size += 1 + 1;
  }

  if (_internal_has_state()) {
    // required int32 state = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (_internal_has_node_test_trigger()) {
    // required int32 node_test_trigger = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_test_trigger());
  }

  return total_size;
}
size_t TestStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cohorts.TestStatus)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required int32 tested_epoch = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tested_epoch());

    // required int32 contact_traced_epoch = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_contact_traced_epoch());

    // required bool tested_positive = 2;
    total_size += 1 + 1;

    // required bool test_requested = 4;
    total_size += 1 + 1;

    // required bool triggered_contact_trace = 6;
    total_size += 1 + 1;

    // required int32 state = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());

    // required int32 node_test_trigger = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_test_trigger());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cohorts.TestStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const TestStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cohorts.TestStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cohorts.TestStatus)
    MergeFrom(*source);
  }
}

void TestStatus::MergeFrom(const TestStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cohorts.TestStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      tested_epoch_ = from.tested_epoch_;
    }
    if (cached_has_bits & 0x00000002u) {
      contact_traced_epoch_ = from.contact_traced_epoch_;
    }
    if (cached_has_bits & 0x00000004u) {
      tested_positive_ = from.tested_positive_;
    }
    if (cached_has_bits & 0x00000008u) {
      test_requested_ = from.test_requested_;
    }
    if (cached_has_bits & 0x00000010u) {
      triggered_contact_trace_ = from.triggered_contact_trace_;
    }
    if (cached_has_bits & 0x00000020u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000040u) {
      node_test_trigger_ = from.node_test_trigger_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cohorts.TestStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestStatus::CopyFrom(const TestStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cohorts.TestStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestStatus::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestStatus::InternalSwap(TestStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestStatus, node_test_trigger_)
      + sizeof(TestStatus::node_test_trigger_)
      - PROTOBUF_FIELD_OFFSET(TestStatus, tested_epoch_)>(
          reinterpret_cast<char*>(&tested_epoch_),
          reinterpret_cast<char*>(&other->tested_epoch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AgentElement::InitAsDefaultInstance() {
  ::cohorts::_AgentElement_default_instance_._instance.get_mutable()->test_status_ = const_cast< ::cohorts::TestStatus*>(
      ::cohorts::TestStatus::internal_default_instance());
}
class AgentElement::_Internal {
 public:
  using HasBits = decltype(std::declval<AgentElement>()._has_bits_);
  static void set_has_infection_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_entered_symptomatic_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_entered_hospitalised_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_state_before_recovery(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_infective(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_disease_label(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::cohorts::TestStatus& test_status(const AgentElement* msg);
  static void set_has_test_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_of_infection(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_time_became_infective(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000001ff) ^ 0x000001ff) != 0;
  }
};

const ::cohorts::TestStatus&
AgentElement::_Internal::test_status(const AgentElement* msg) {
  return *msg->test_status_;
}
AgentElement::AgentElement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cohorts.AgentElement)
}
AgentElement::AgentElement(const AgentElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_test_status()) {
    test_status_ = new ::cohorts::TestStatus(*from.test_status_);
  } else {
    test_status_ = nullptr;
  }
  ::memcpy(&infection_status_, &from.infection_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_became_infective_) -
    reinterpret_cast<char*>(&infection_status_)) + sizeof(time_became_infective_));
  // @@protoc_insertion_point(copy_constructor:cohorts.AgentElement)
}

void AgentElement::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AgentElement_agents_5fstore_2eproto.base);
  ::memset(&test_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_became_infective_) -
      reinterpret_cast<char*>(&test_status_)) + sizeof(time_became_infective_));
}

AgentElement::~AgentElement() {
  // @@protoc_insertion_point(destructor:cohorts.AgentElement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AgentElement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete test_status_;
}

void AgentElement::ArenaDtor(void* object) {
  AgentElement* _this = reinterpret_cast< AgentElement* >(object);
  (void)_this;
}
void AgentElement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AgentElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AgentElement& AgentElement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AgentElement_agents_5fstore_2eproto.base);
  return *internal_default_instance();
}


void AgentElement::Clear() {
// @@protoc_insertion_point(message_clear_start:cohorts.AgentElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(test_status_ != nullptr);
    test_status_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&infection_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_of_infection_) -
        reinterpret_cast<char*>(&infection_status_)) + sizeof(time_of_infection_));
  }
  time_became_infective_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgentElement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 infection_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_infection_status(&has_bits);
          infection_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool entered_symptomatic_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_entered_symptomatic_state(&has_bits);
          entered_symptomatic_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool entered_hospitalised_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_entered_hospitalised_state(&has_bits);
          entered_hospitalised_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 state_before_recovery = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_state_before_recovery(&has_bits);
          state_before_recovery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool infective = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_infective(&has_bits);
          infective_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 disease_label = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_disease_label(&has_bits);
          disease_label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .cohorts.TestStatus test_status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_test_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 time_of_infection = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_time_of_infection(&has_bits);
          time_of_infection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 time_became_infective = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_time_became_infective(&has_bits);
          time_became_infective_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgentElement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cohorts.AgentElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 infection_status = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_infection_status(), target);
  }

  // required bool entered_symptomatic_state = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_entered_symptomatic_state(), target);
  }

  // required bool entered_hospitalised_state = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_entered_hospitalised_state(), target);
  }

  // required int32 state_before_recovery = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_state_before_recovery(), target);
  }

  // required bool infective = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_infective(), target);
  }

  // required int32 disease_label = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_disease_label(), target);
  }

  // required .cohorts.TestStatus test_status = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::test_status(this), target, stream);
  }

  // required int32 time_of_infection = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_time_of_infection(), target);
  }

  // required int32 time_became_infective = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_time_became_infective(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cohorts.AgentElement)
  return target;
}

size_t AgentElement::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cohorts.AgentElement)
  size_t total_size = 0;

  if (_internal_has_test_status()) {
    // required .cohorts.TestStatus test_status = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *test_status_);
  }

  if (_internal_has_infection_status()) {
    // required int32 infection_status = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_infection_status());
  }

  if (_internal_has_entered_symptomatic_state()) {
    // required bool entered_symptomatic_state = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_entered_hospitalised_state()) {
    // required bool entered_hospitalised_state = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_infective()) {
    // required bool infective = 5;
    total_size += 1 + 1;
  }

  if (_internal_has_state_before_recovery()) {
    // required int32 state_before_recovery = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state_before_recovery());
  }

  if (_internal_has_disease_label()) {
    // required int32 disease_label = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_disease_label());
  }

  if (_internal_has_time_of_infection()) {
    // required int32 time_of_infection = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time_of_infection());
  }

  if (_internal_has_time_became_infective()) {
    // required int32 time_became_infective = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time_became_infective());
  }

  return total_size;
}
size_t AgentElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cohorts.AgentElement)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required .cohorts.TestStatus test_status = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *test_status_);

    // required int32 infection_status = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_infection_status());

    // required bool entered_symptomatic_state = 2;
    total_size += 1 + 1;

    // required bool entered_hospitalised_state = 3;
    total_size += 1 + 1;

    // required bool infective = 5;
    total_size += 1 + 1;

    // required int32 state_before_recovery = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state_before_recovery());

    // required int32 disease_label = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_disease_label());

    // required int32 time_of_infection = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time_of_infection());

    // required int32 time_became_infective = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time_became_infective());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AgentElement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cohorts.AgentElement)
  GOOGLE_DCHECK_NE(&from, this);
  const AgentElement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AgentElement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cohorts.AgentElement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cohorts.AgentElement)
    MergeFrom(*source);
  }
}

void AgentElement::MergeFrom(const AgentElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cohorts.AgentElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_test_status()->::cohorts::TestStatus::MergeFrom(from._internal_test_status());
    }
    if (cached_has_bits & 0x00000002u) {
      infection_status_ = from.infection_status_;
    }
    if (cached_has_bits & 0x00000004u) {
      entered_symptomatic_state_ = from.entered_symptomatic_state_;
    }
    if (cached_has_bits & 0x00000008u) {
      entered_hospitalised_state_ = from.entered_hospitalised_state_;
    }
    if (cached_has_bits & 0x00000010u) {
      infective_ = from.infective_;
    }
    if (cached_has_bits & 0x00000020u) {
      state_before_recovery_ = from.state_before_recovery_;
    }
    if (cached_has_bits & 0x00000040u) {
      disease_label_ = from.disease_label_;
    }
    if (cached_has_bits & 0x00000080u) {
      time_of_infection_ = from.time_of_infection_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_time_became_infective(from._internal_time_became_infective());
  }
}

void AgentElement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cohorts.AgentElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentElement::CopyFrom(const AgentElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cohorts.AgentElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentElement::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_test_status()) {
    if (!test_status_->IsInitialized()) return false;
  }
  return true;
}

void AgentElement::InternalSwap(AgentElement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AgentElement, time_became_infective_)
      + sizeof(AgentElement::time_became_infective_)
      - PROTOBUF_FIELD_OFFSET(AgentElement, test_status_)>(
          reinterpret_cast<char*>(&test_status_),
          reinterpret_cast<char*>(&other->test_status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentElement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AgentStore::InitAsDefaultInstance() {
}
class AgentStore::_Internal {
 public:
};

AgentStore::AgentStore(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  agents_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cohorts.AgentStore)
}
AgentStore::AgentStore(const AgentStore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      agents_(from.agents_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cohorts.AgentStore)
}

void AgentStore::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AgentStore_agents_5fstore_2eproto.base);
}

AgentStore::~AgentStore() {
  // @@protoc_insertion_point(destructor:cohorts.AgentStore)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AgentStore::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AgentStore::ArenaDtor(void* object) {
  AgentStore* _this = reinterpret_cast< AgentStore* >(object);
  (void)_this;
}
void AgentStore::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AgentStore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AgentStore& AgentStore::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AgentStore_agents_5fstore_2eproto.base);
  return *internal_default_instance();
}


void AgentStore::Clear() {
// @@protoc_insertion_point(message_clear_start:cohorts.AgentStore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agents_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgentStore::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .cohorts.AgentElement agents = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_agents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgentStore::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cohorts.AgentStore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cohorts.AgentElement agents = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_agents_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_agents(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cohorts.AgentStore)
  return target;
}

size_t AgentStore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cohorts.AgentStore)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cohorts.AgentElement agents = 1;
  total_size += 1UL * this->_internal_agents_size();
  for (const auto& msg : this->agents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AgentStore::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cohorts.AgentStore)
  GOOGLE_DCHECK_NE(&from, this);
  const AgentStore* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AgentStore>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cohorts.AgentStore)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cohorts.AgentStore)
    MergeFrom(*source);
  }
}

void AgentStore::MergeFrom(const AgentStore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cohorts.AgentStore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  agents_.MergeFrom(from.agents_);
}

void AgentStore::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cohorts.AgentStore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentStore::CopyFrom(const AgentStore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cohorts.AgentStore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentStore::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(agents_)) return false;
  return true;
}

void AgentStore::InternalSwap(AgentStore* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  agents_.InternalSwap(&other->agents_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentStore::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace cohorts
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cohorts::TestStatus* Arena::CreateMaybeMessage< ::cohorts::TestStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cohorts::TestStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::cohorts::AgentElement* Arena::CreateMaybeMessage< ::cohorts::AgentElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cohorts::AgentElement >(arena);
}
template<> PROTOBUF_NOINLINE ::cohorts::AgentStore* Arena::CreateMaybeMessage< ::cohorts::AgentStore >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cohorts::AgentStore >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
